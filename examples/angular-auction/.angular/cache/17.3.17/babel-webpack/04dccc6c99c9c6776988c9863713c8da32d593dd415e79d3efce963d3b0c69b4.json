{"ast":null,"code":"import _asyncToGenerator from \"D:/Scripts/Factory/fhevm-sdk-pro/node_modules/.pnpm/@babel+runtime@7.26.10/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Injectable, NgModule } from '@angular/core';\nimport { FHEVMClient } from '@mixaspro/core';\nimport { Subject, BehaviorSubject, from, throwError } from 'rxjs';\nimport { catchError, takeUntil, map } from 'rxjs/operators';\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--) if (decorator = decorators[i]) result = decorator(result) || result;\n  return result;\n};\nvar FHEVMService = class {\n  constructor() {\n    this.client = null;\n    this.destroy$ = new Subject();\n    /**\n     * Initialization state\n     */\n    this.isInitializedSubject = new BehaviorSubject(false);\n    this.isInitialized$ = this.isInitializedSubject.asObservable();\n    /**\n     * Network information\n     */\n    this.networkSubject = new BehaviorSubject(null);\n    this.network$ = this.networkSubject.asObservable();\n    /**\n     * Wallet information\n     */\n    this.walletSubject = new BehaviorSubject(null);\n    this.wallet$ = this.walletSubject.asObservable();\n    /**\n     * Error state\n     */\n    this.errorSubject = new BehaviorSubject(null);\n    this.error$ = this.errorSubject.asObservable();\n  }\n  /**\n   * Get current client instance\n   */\n  getClient() {\n    return this.client;\n  }\n  /**\n   * Initialize FHEVM client\n   * \n   * @param config - FHEVM configuration\n   * @returns Observable that completes when initialized\n   * \n   * @example\n   * ```typescript\n   * this.fhevm.initialize({ chainId: 31337 }).subscribe({\n   *   next: () => console.log('Initialized'),\n   *   error: (err) => console.error('Init failed:', err)\n   * })\n   * ```\n   */\n  initialize(config) {\n    return from(this.initializeAsync(config)).pipe(catchError(error => {\n      this.errorSubject.next(error instanceof Error ? error : new Error(\"Initialization failed\"));\n      return throwError(() => error);\n    }), takeUntil(this.destroy$));\n  }\n  initializeAsync(config) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.errorSubject.next(null);\n      const fhevmClient = new FHEVMClient();\n      yield fhevmClient.initialize(config);\n      _this.client = fhevmClient;\n      _this.isInitializedSubject.next(true);\n      _this.networkSubject.next(fhevmClient.getNetwork());\n    })();\n  }\n  /**\n   * Connect wallet\n   * \n   * @param provider - EIP-1193 provider\n   * @returns Observable of wallet info\n   * \n   * @example\n   * ```typescript\n   * this.fhevm.connectWallet(window.ethereum).subscribe(\n   *   wallet => console.log('Connected:', wallet.address)\n   * )\n   * ```\n   */\n  connectWallet(provider) {\n    if (this.client === null || this.client === void 0) {\n      return throwError(() => new Error(\"FHEVM client not initialized\"));\n    }\n    return from(this.client.connectWallet(provider)).pipe(map(walletInfo => {\n      this.walletSubject.next(walletInfo);\n      return walletInfo;\n    }), catchError(error => {\n      this.errorSubject.next(error instanceof Error ? error : new Error(\"Wallet connection failed\"));\n      return throwError(() => error);\n    }), takeUntil(this.destroy$));\n  }\n  /**\n   * Disconnect wallet\n   */\n  disconnectWallet() {\n    this.walletSubject.next(null);\n    this.errorSubject.next(null);\n  }\n  /**\n   * Encrypt a value\n   * \n   * @param value - Value to encrypt\n   * @param type - Encrypted type\n   * @param options - Encryption options\n   * @returns Observable of encrypted value\n   * \n   * @example\n   * ```typescript\n   * this.fhevm.encrypt(42, 'euint32').subscribe(\n   *   encrypted => console.log('Handle:', encrypted.handle),\n   *   error => console.error('Encryption failed:', error)\n   * )\n   * ```\n   */\n  encrypt(value, type, options) {\n    if (this.client === null || this.client === void 0) {\n      return throwError(() => new Error(\"FHEVM client not initialized\"));\n    }\n    return from(this.client.encrypt(value, type, options)).pipe(catchError(error => {\n      this.errorSubject.next(error instanceof Error ? error : new Error(\"Encryption failed\"));\n      return throwError(() => error);\n    }), takeUntil(this.destroy$));\n  }\n  /**\n   * Decrypt a ciphertext\n   * \n   * @param ciphertext - Ciphertext to decrypt\n   * @param timeout - Timeout in milliseconds\n   * @returns Observable of decrypted value\n   * \n   * @example\n   * ```typescript\n   * this.fhevm.decrypt(ciphertext).subscribe(\n   *   value => console.log('Decrypted:', value),\n   *   error => console.error('Decryption failed:', error)\n   * )\n   * ```\n   */\n  decrypt(ciphertext, timeout = 3e4) {\n    if (this.client === null || this.client === void 0) {\n      return throwError(() => new Error(\"FHEVM client not initialized\"));\n    }\n    return from(this.decryptAsync(ciphertext, timeout)).pipe(catchError(error => {\n      this.errorSubject.next(error instanceof Error ? error : new Error(\"Decryption failed\"));\n      return throwError(() => error);\n    }), takeUntil(this.destroy$));\n  }\n  decryptAsync(ciphertext, timeout) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.client === null || _this2.client === void 0) {\n        throw new Error(\"FHEVM client not initialized\");\n      }\n      const request = yield _this2.client.requestDecryption(ciphertext);\n      const result = yield _this2.client.waitForDecryption(request.id, timeout);\n      return result.value;\n    })();\n  }\n  /**\n   * Execute contract function\n   * \n   * @param params - Contract function parameters\n   * @returns Observable of transaction receipt\n   * \n   * @example\n   * ```typescript\n   * this.fhevm.executeContract({\n   *   address: '0x...',\n   *   abi: contractABI,\n   *   functionName: 'transfer',\n   *   args: [recipient, amount]\n   * }).subscribe(\n   *   receipt => console.log('TX hash:', receipt.hash),\n   *   error => console.error('TX failed:', error)\n   * )\n   * ```\n   */\n  executeContract(params) {\n    if (this.client === null || this.client === void 0) {\n      return throwError(() => new Error(\"FHEVM client not initialized\"));\n    }\n    return from(this.client.executeContract(params)).pipe(catchError(error => {\n      this.errorSubject.next(error instanceof Error ? error : new Error(\"Contract execution failed\"));\n      return throwError(() => error);\n    }), takeUntil(this.destroy$));\n  }\n  /**\n   * Cleanup on service destroy\n   */\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.isInitializedSubject.complete();\n    this.networkSubject.complete();\n    this.walletSubject.complete();\n    this.errorSubject.complete();\n  }\n};\nFHEVMService = __decorateClass([Injectable({\n  providedIn: \"root\"\n})], FHEVMService);\n\n// src/module.ts\nvar FHEVMModule = class {\n  /**\n   * Configure FHEVM module for root\n   * \n   * @param config - Module configuration\n   * @returns Module with providers\n   */\n  static forRoot(config) {\n    return {\n      ngModule: FHEVMModule,\n      providers: [FHEVMService, {\n        provide: \"FHEVM_CONFIG\",\n        useValue: config\n      }]\n    };\n  }\n};\nFHEVMModule = __decorateClass([NgModule({\n  providers: [FHEVMService]\n})], FHEVMModule);\n\n// src/index.ts\nvar VERSION = \"1.0.0\";\nexport { FHEVMModule, FHEVMService, VERSION };\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}